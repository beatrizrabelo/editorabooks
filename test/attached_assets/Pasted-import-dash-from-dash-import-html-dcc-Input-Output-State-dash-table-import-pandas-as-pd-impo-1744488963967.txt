import dash
from dash import html, dcc, Input, Output, State, dash_table
import pandas as pd
import os

# Caminho do arquivo CSV
CSV_PATH = 'livros.csv'

# Verifica se o arquivo CSV jÃ¡ existe, caso contrÃ¡rio, cria um novo com as colunas padrÃ£o
if os.path.exists(CSV_PATH):
    df_livros = pd.read_csv(CSV_PATH)
else:
    df_livros = pd.DataFrame(columns=['TÃ­tulo', 'Autor', 'GÃªnero', 'Ano'])

# CriaÃ§Ã£o do app Dash
app = dash.Dash(__name__, external_stylesheets=['https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css'])
app.title = "Biblioteca Pessoal"

# Layout do app
app.layout = html.Div([
    html.Div([
        html.H2("ðŸ“š Biblioteca Pessoal", className="mb-4 text-center"),

        # FormulÃ¡rio para adicionar livros
        html.Div([
            dcc.Input(id='input-titulo', type='text', placeholder='TÃ­tulo', className='form-control mb-2'),
            dcc.Input(id='input-autor', type='text', placeholder='Autor', className='form-control mb-2'),
            dcc.Input(id='input-genero', type='text', placeholder='GÃªnero', className='form-control mb-2'),
            dcc.Input(id='input-ano', type='number', placeholder='Ano', className='form-control mb-2'),

            # BotÃ£o para adicionar livro
            html.Button("Adicionar Livro", id='botao-adicionar', className='btn btn-primary mb-3 w-100'),
        ], className="col-md-6 offset-md-3"),

        html.Hr(),

        # Tabela para exibir livros cadastrados
        html.Div([
            html.H4("ðŸ“– Livros cadastrados:", className="mb-3"),
            dash_table.DataTable(
                id='tabela-livros',
                columns=[
                    {'name': col, 'id': col} for col in ['TÃ­tulo', 'Autor', 'GÃªnero', 'Ano']
                ],
                data=df_livros.to_dict('records'),  # Exibe os livros carregados do CSV
                style_cell={'textAlign': 'left', 'padding': '5px'},
                style_header={'backgroundColor': '#007bff', 'color': 'white'},
                style_table={'overflowX': 'auto'},
            )
        ], className="col-md-10 offset-md-1"),
    ], className="container mt-4")
])

# Callback para adicionar livro ao CSV e atualizar a tabela
@app.callback(
    Output('tabela-livros', 'data'),  # Atualiza a tabela com os livros
    Input('botao-adicionar', 'n_clicks'),  # Aciona quando o botÃ£o for clicado
    State('input-titulo', 'value'),  # Valor do tÃ­tulo
    State('input-autor', 'value'),  # Valor do autor
    State('input-genero', 'value'),  # Valor do gÃªnero
    State('input-ano', 'value'),  # Valor do ano
    prevent_initial_call=True  # NÃ£o chama no inÃ­cio
)
def adicionar_livro(n_clicks, titulo, autor, genero, ano):
    global df_livros

    # Verifica se os campos estÃ£o preenchidos
    if not titulo or not autor or not genero or not ano:
        return df_livros.to_dict('records')  # Retorna a tabela sem mudanÃ§as caso algum campo esteja vazio

    # Cria um novo livro e adiciona ao dataframe
    novo_livro = pd.DataFrame([{
        'TÃ­tulo': titulo,
        'Autor': autor,
        'GÃªnero': genero,
        'Ano': int(ano)
    }])

    # Adiciona o novo livro ao dataframe
    df_livros = pd.concat([df_livros, novo_livro], ignore_index=True)
    
    # Salva o dataframe atualizado no CSV
    df_livros.to_csv(CSV_PATH, index=False)

    # Retorna os dados atualizados da tabela para o frontend
    return df_livros.to_dict('records')

# Inicia o servidor Dash
if __name__ == '__main__':
    app.run(debug=True)
